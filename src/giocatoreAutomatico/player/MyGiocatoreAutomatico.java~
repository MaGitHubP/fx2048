package giocatoreAutomatico.player;
import giocatoreAutomatico.*;
import game2048.Location;
import game2048.Direction;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Iterator;
import java.util.Random;

public class MyGiocatoreAutomatico implements GiocatoreAutomatico{
    
    public int prossimaMossa(Griglia g){
        /*Qui faccio un iterazione sugli elementi della HashMap,
         *sia le Key sia le Value.
        */
        Iterator it=g.entrySet().iterator();
        Location loc, farthest, temp;
        Integer val;
        int mergedIfUp=0, mergedIfDown=0, mergedIfRight=0, mergedIfLeft=0;
        
        /*Qui controllo ogni singolo tile della griglia e controllo
         *se ci sono delle unioni considerando ogni direzione.Il 
         *numero totale di fusioni nel caso di ogni direzione vengono
         *accumulate nelle variabili mergedIfUp, etc...*/
        while(it.hasNext()){
            HashMap.Entry tile=(HashMap.Entry)it.next();
            loc=(Location)tile.getKey();
            temp=loc;
            val=(Integer)tile.getValue();
            
            //Case UP.
            do {
            farthest = temp;
            temp = farthest.offset(Direction.UP);
            }while (temp.isValidFor(4) && g.get(temp) == -1);
            
            if(temp.isValidFor(4)){
                    if(g.get(temp)!=-1){
                        if(g.get(temp).equals(val)){
                            mergedIfUp++;
                        }
                }
            }
            
            //Case DOWN.
            temp=loc;
            
            do {
            farthest = temp;
            temp = farthest.offset(Direction.DOWN);
            }while (temp.isValidFor(4) && g.get(temp) == -1);
            
            if(temp.isValidFor(4)){
                    if(g.get(temp)!=-1){
                        if(g.get(temp).equals(val)){
                            mergedIfDown++;
                        }
                }
            }
            
            //Case RIGHT.
            temp=loc;
            
            do {
            farthest = temp;
            temp = farthest.offset(Direction.RIGHT);
            }while (temp.isValidFor(4) && g.get(temp) == -1);
            
            if(temp.isValidFor(4)){
                    if(g.get(temp)!=-1){
                        if(g.get(temp).equals(val)){
                            mergedIfRight++;
                        }
                }
            }
            
            //Case LEFT.
            temp=loc;
            
            do {
            farthest = temp;
            temp = farthest.offset(Direction.LEFT);
            }while (temp.isValidFor(4) && g.get(temp) == -1);
            
            if(temp.isValidFor(4)){
                    if(g.get(temp)!=-1){
                        if(g.get(temp).equals(val)){
                            mergedIfLeft++;
                        }
                }
            }
            
        }
        int better, rand;
        Random r=new Random();
        boolean upBetter=false, downBetter=false, rightBetter=false, leftBetter=false;
        
        /*Qui controllo qual'è il più grande tra i mergedIf, e 
         *quindi qual'è la direzione più conveniente da eseguire.*/
        if(mergedIfUp>mergedIfDown){
            better=mergedIfUp;
            upBetter=true;
        }else if(mergedIfUp<mergedIfDown){
            better=mergedIfDown;
            downBetter=true;
        }else{
            rand=r.nextInt(2);
            if(rand==0){
                better=mergedIfUp;
                upBetter=true;
            }else{
                better=mergedIfDown;
                downBetter=true;
            }
        }
        
        if(upBetter){
            if(better>mergedIfRight){
                better=mergedIfUp;
                upBetter=true;
            }else if(better<mergedIfRight){
                better=mergedIfRight;
                rightBetter=true;
                upBetter=false;
            }else{
                rand=r.nextInt(2);
                if(rand==0){
                    better=mergedIfUp;
                    upBetter=true;
                }else{
                    better=mergedIfRight;
                    rightBetter=true;
                    upBetter=false;
                }
            }
        }else{
            if(better>mergedIfRight){
                better=mergedIfDown;
                downBetter=true;
            }else if(better<mergedIfRight){
                better=mergedIfRight;
                rightBetter=true;
                downBetter=false;
            }else{
                rand=r.nextInt(2);
                if(rand==0){
                    better=mergedIfDown;
                    downBetter=true;
                }else{
                    better=mergedIfRight;
                    rightBetter=true;
                    downBetter=false;
                }
            }
        }
        
        if(better>mergedIfLeft){
            if(upBetter){
                return 0;
            }else if(downBetter){
                return 2;
            }else{
                return 1;
            }
        }else if(better<mergedIfLeft){
            return 3;
        }else{
            rand=r.nextInt(2);
            if(rand==0){
                if(upBetter){
                    return 0;
                }else if(downBetter){
                    return 2;
                }else{
                    return 1;
                }
            }else{
                return 3;
            }
        }
    }
   
    
}
